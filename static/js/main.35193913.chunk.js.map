{"version":3,"sources":["context/BoardContext.js","context/RobotContext.js","components/Robot.js","components/Board.js","components/ControlPanel.js","App.js","reportWebVitals.js","index.js"],"names":["BoardContext","createContext","BoardProvider","children","useState","boardShape","setBoardShape","Provider","value","resizeBoard","size","RobotContext","RobotProvider","x","y","f","robots","setRobots","useContext","cardinalDirections","isRobot","robot","addRobot","turnRobot","robotIndex","direction","_robots","index","indexOf","moveRobot","robotDirection","Robot","fontSize","ChevronUp","w","h","ChevronRight","ChevronDown","ChevronLeft","findDirection","Board","entries","spacing","Array","map","row","i","column","j","bg","ControlPanel","currentRobot","setCurrentRobot","report","setReport","newRobotX","setNewRobotX","newRobotY","setNewRobotY","newRobotF","setNewRobotF","useEffect","onChange","e","target","my","onClick","mt","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35193913.chunk.js","sourcesContent":["import { useState, createContext } from 'react'\n\nexport const BoardContext = createContext()\n\nexport const BoardProvider = ({ children }) => {\n  const [boardShape, setBoardShape] = useState([5, 5])\n\n  const resizeBoard = (size) => {\n    setBoardShape(size)\n  }\n\n  return (\n    <BoardContext.Provider value={{ boardShape, resizeBoard }}>\n      {children}\n    </BoardContext.Provider>\n  )\n}\n","import { useState, createContext, useContext } from 'react'\nimport { BoardContext } from './BoardContext'\nexport const RobotContext = createContext()\n\nexport const RobotProvider = ({ children }) => {\n  const [robots, setRobots] = useState([{ x: 0, y: 0, f: 'n' }])\n\n  const { boardShape } = useContext(BoardContext)\n\n  const cardinalDirections = ['n', 'e', 's', 'w']\n\n  const addRobot = (x, y, f) => {\n    setRobots((robots) => [...robots, { x: x, y: y, f: f }])\n  }\n\n  const turnRobot = (robotIndex, direction) => {\n    const _robots = [...robots]\n\n    let index =\n      cardinalDirections.indexOf(robots[robotIndex].f) +\n      (direction === 'right' ? 1 : -1)\n\n    if (index > 3) {\n      index -= 4\n    } else if (index < 0) {\n      index += 4\n    }\n\n    _robots[robotIndex].f = cardinalDirections[index]\n\n    setRobots([..._robots])\n  }\n\n  const isRobot = (x, y) => {\n    for (const robot of robots) {\n      if (robot.x === x && robot.y === y) {\n        return true\n      }\n    }\n    return false\n  }\n\n  const moveRobot = (robotIndex) => {\n    const _robots = [...robots]\n    let { x, y, f } = _robots[robotIndex]\n\n    if (f === 'n' && y + 1 < boardShape[1]) {\n      if (!isRobot(x, y + 1)) {\n        y += 1\n      }\n    } else if (f === 'e' && x + 1 < boardShape[0]) {\n      if (!isRobot(x + 1, y)) {\n        x += 1\n      }\n    } else if (f === 's' && y > 0) {\n      if (!isRobot(x, y - 1)) {\n        y -= 1\n      }\n    } else if (f === 'w' && x > 0) {\n      if (!isRobot(x - 1, y)) {\n        x -= 1\n      }\n    }\n\n    _robots[robotIndex] = { x, y, f }\n\n    setRobots([..._robots])\n  }\n\n  const robotDirection = (robotIndex) => {\n    const { f } = robots[robotIndex]\n\n    if (f === 'n') {\n      return 'North'\n    }\n    if (f === 'e') {\n      return 'East'\n    }\n    if (f === 's') {\n      return 'South'\n    }\n    if (f === 'w') {\n      return 'West'\n    }\n  }\n\n  return (\n    <RobotContext.Provider\n      value={{ robots, addRobot, turnRobot, moveRobot, robotDirection }}\n    >\n      {children}\n    </RobotContext.Provider>\n  )\n}\n","import React from 'react'\nimport {\n  ChevronUpIcon,\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from '@chakra-ui/icons'\nimport { Text } from '@chakra-ui/react'\n\nexport default function Robot({ x, y, f, index }) {\n  const findDirection = (f) => {\n    if (f === 'n') {\n      return <ChevronUpIcon w={6} h={6} />\n    }\n    if (f === 'e') {\n      return <ChevronRightIcon w={6} h={6} />\n    }\n    if (f === 's') {\n      return <ChevronDownIcon w={6} h={6} />\n    }\n    if (f === 'w') {\n      return <ChevronLeftIcon w={6} h={6} />\n    }\n  }\n\n  return (\n    <div>\n      <Text fontSize='sm'>R {index + 1}</Text>\n      {findDirection(f)}\n    </div>\n  )\n}\n","import React, { useContext } from 'react'\n\nimport { VStack, HStack, Center } from '@chakra-ui/react'\n\nimport { BoardContext } from '../context/BoardContext'\nimport { RobotContext } from '../context/RobotContext'\n\nimport Robot from './Robot'\n\nconst boardSpacing = 3\nconst squareSize = 6\n\nexport default function Board() {\n  const { boardShape } = useContext(BoardContext)\n  const { robots } = useContext(RobotContext)\n\n  const isRobot = (x, y) => {\n    for (const [index, value] of robots.entries()) {\n      if (value.x === x && value.y === boardShape[1] - y - 1) {\n        return <Robot x={x} y={y} f={value.f} index={index} />\n      }\n    }\n  }\n\n  return (\n    <VStack spacing={`${boardSpacing}vh`}>\n      {[...Array(boardShape[0])].map((row, i) => (\n        <HStack key={i} spacing={`${boardSpacing}vw`}>\n          {[...Array(boardShape[1])].map((column, j) => (\n            <Center\n              key={j}\n              w={`${squareSize}vw`}\n              h={`${squareSize}vw`}\n              bg='mistyrose'\n            >\n              {isRobot(j, i)}\n            </Center>\n          ))}\n        </HStack>\n      ))}\n    </VStack>\n  )\n}\n","import React, { useContext, useState, useEffect } from 'react'\n\nimport {\n  Radio,\n  RadioGroup,\n  Stack,\n  Container,\n  Button,\n  Center,\n  Text,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  Select,\n} from '@chakra-ui/react'\n\nimport { RobotContext } from '../context/RobotContext'\n\nexport default function ControlPanel() {\n  const [currentRobot, setCurrentRobot] = useState(0)\n  const [report, setReport] = useState('')\n  const [newRobotX, setNewRobotX] = useState(0)\n  const [newRobotY, setNewRobotY] = useState(0)\n  const [newRobotF, setNewRobotF] = useState('n')\n\n  const { robots, turnRobot, moveRobot, addRobot, robotDirection } =\n    useContext(RobotContext)\n\n  const generateReport = () => {\n    setReport(\n      <Container>\n        {robots.map((robot, i) => (\n          <Text key={i}>\n            Robot {i + 1}, x: {robot.x} y: {robot.y} direction:{' '}\n            {robotDirection(i)}\n          </Text>\n        ))}\n      </Container>\n    )\n  }\n\n  const addNewRobot = () => {\n    addRobot(newRobotX, newRobotY, newRobotF)\n  }\n\n  useEffect(() => {\n    setReport('')\n  }, [robots])\n\n  return (\n    <Container>\n      <Center>\n        <Stack direction='column'>\n          <Stack direction='row'>\n            <InputGroup>\n              <InputLeftAddon children='X:' />\n              <Input\n                value={newRobotX + 1}\n                onChange={(e) => setNewRobotX(e.target.value - 1)}\n              />\n            </InputGroup>\n            <InputGroup>\n              <InputLeftAddon children='Y:' />\n              <Input\n                value={newRobotY + 1}\n                onChange={(e) => setNewRobotY(e.target.value - 1)}\n              />\n            </InputGroup>\n            <Select\n              value={newRobotF}\n              onChange={(e) => setNewRobotF(e.target.value)}\n            >\n              <option value='n'>North</option>\n              <option value='e'>East</option>\n              <option value='s'>South</option>\n              <option value='w'>West</option>\n            </Select>\n          </Stack>\n          <Button my='5' onClick={addNewRobot}>\n            Add Robot\n          </Button>\n          <RadioGroup\n            onChange={(e) => setCurrentRobot(+e)}\n            value={+currentRobot}\n            my='4'\n          >\n            <Stack direction='row'>\n              {robots.map((robot, i) => (\n                <Radio key={i} value={i}>\n                  {i + 1}\n                </Radio>\n              ))}\n            </Stack>\n          </RadioGroup>\n          <Stack direction='row' my='5'>\n            <Button onClick={() => turnRobot(+currentRobot, 'left')}>\n              Left\n            </Button>\n            <Button onClick={() => turnRobot(+currentRobot, 'right')}>\n              Right\n            </Button>\n          </Stack>\n          <Button my='5' onClick={() => moveRobot(+currentRobot)}>\n            Move\n          </Button>\n          <Button mt='5' onClick={generateReport}>\n            Report\n          </Button>\n        </Stack>\n      </Center>\n      <Container my='5'>{report}</Container>\n    </Container>\n  )\n}\n","import React from 'react'\nimport { Center, Container, VStack } from '@chakra-ui/react'\nimport './app.css'\n\nimport Board from './components/Board'\nimport ControlPanel from './components/ControlPanel'\n\nfunction App() {\n  return (\n    <Container className='main'>\n      <Center h='100vh'>\n        <VStack>\n          <Board />\n          <ControlPanel />\n        </VStack>\n      </Center>\n    </Container>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { ChakraProvider } from '@chakra-ui/react'\n\nimport { BoardProvider } from './context/BoardContext'\nimport { RobotProvider } from './context/RobotContext'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <BoardProvider>\n        <RobotProvider>\n          <App />\n        </RobotProvider>\n      </BoardProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}